name: Predict
inputs:
- {name: model_features, type: Dataset}
- {name: model_params, type: Artifact}
- {name: model_name, type: String}
- {name: num_ensemble, type: Integer}
- {name: random_seed, type: Integer}
outputs:
- {name: raw_prediction, type: Artifact}
- {name: unrelaxed_protein, type: Artifact}
implementation:
  container:
    image: gcr.io/jk-mlops-dev/alphafold-components
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef predict(\n    model_features: Input[Dataset],\n    model_params:\
      \ Input[Artifact],\n    model_name: str,\n    num_ensemble: int,\n    random_seed:\
      \ int,\n    raw_prediction: Output[Artifact],\n    unrelaxed_protein: Output[Artifact]\n\
      ):\n\n    import io\n    import os\n    import logging\n    import numpy as\
      \ np\n    import pickle\n    import haiku as hk\n\n    from alphafold.model\
      \ import config\n    from alphafold.model import model\n    from alphafold.model\
      \ import utils\n    from alphafold.common import residue_constants\n    from\
      \ alphafold.common import protein\n\n    def _get_model_haiku_params(model_name:\
      \ str,\n                                params_dir: str):\n        \"\"\"Get\
      \ the Haiku parameters from a model name.\"\"\"\n\n        path = os.path.join(params_dir,\
      \ f'params_{model_name}.npz')\n        with open(path, 'rb') as f:\n       \
      \     params = np.load(io.BytesIO(f.read()), allow_pickle=False)\n\n       \
      \ return utils.flat_params_to_haiku(params)\n\n    def _load_features(features_path):\n\
      \        features_path = model_features.path\n        with open(features_path,\
      \ 'rb') as f:\n            features = pickle.load(f)\n        return features\n\
      \n    model_config = config.model_config(model_name)\n\n    # we assume  a monomer\
      \ pipeline in a POC\n    model_config.data.eval.num_ensemble = num_ensemble\n\
      \    model_params = _get_model_haiku_params(\n        model_name=model_name,\
      \ params_dir=model_params.path)\n    model_runner = model.RunModel(model_config,\
      \ model_params)\n\n    features = _load_features(model_features.path)\n    logging.info(f'Running\
      \ prediction using model {model_name}')\n    processed_feature_dict = model_runner.process_features(\n\
      \        raw_features=features,\n        random_seed=random_seed\n    )\n  \
      \  prediction_result = model_runner.predict(\n        feat=processed_feature_dict,\n\
      \        random_seed=random_seed\n    )\n\n    logging.info(f'Writing model\
      \ {model_name} prediction to {raw_prediction.path}') \n    with open(raw_prediction.path,\
      \ 'wb') as f:\n        pickle.dump(prediction_result, f, protocol=4)\n    raw_prediction.metadata['ranking_confidence']=prediction_result['ranking_confidence']\n\
      \    raw_prediction.metadata['data_format']='pkl'\n\n    plddt = prediction_result['plddt']\n\
      \    plddt_b_factors = np.repeat(\n        plddt[:, None], residue_constants.atom_type_num,\
      \ axis=-1)\n    unrelaxed_structure= protein.from_prediction(\n        features=processed_feature_dict,\n\
      \        result=prediction_result,\n        b_factors=plddt_b_factors,\n   \
      \     remove_leading_feature_dimension=not model_runner.multimer_mode)\n   \
      \ unrelaxed_pdbs = protein.to_pdb(unrelaxed_structure)\n\n    logging.info(f'Writing\
      \ unrelaxed protein generated by {model_name} to {unrelaxed_protein.path}')\
      \ \n    with open(unrelaxed_protein.path, 'w') as f:\n        f.write(unrelaxed_pdbs)\n\
      \    unrelaxed_protein.metadata['data_format']='pdb'\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - predict
