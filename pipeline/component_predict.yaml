name: Predict
inputs:
- {name: model_features, type: Dataset}
- {name: model_params, type: Artifact}
- {name: model_name, type: String}
- {name: num_ensemble, type: Integer}
- {name: random_seed, type: Integer}
outputs:
- {name: prediction_result, type: Artifact}
- {name: unrelaxed_protein, type: Artifact}
implementation:
  container:
    image: gcr.io/jk-mlops-dev/alphafold
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def predict(
          model_features: Input[Dataset],
          model_params: Input[Artifact],
          model_name: str,
          num_ensemble: int,
          random_seed: int,
          prediction_result: Output[Artifact],
          unrelaxed_protein: Output[Artifact]
      ):

          import os
          import logging
          import numpy as np
          import pickle

          import haiku as hk

          from alphafold.model import config
          from alphafold.model import data
          from alphafold.model import model
          from alphafold.model import utils
          from alphafold.common import residue_constants
          from alphafold.common import protein


          def _get_model_haiku_params(model_name: str,
                                      model_params: Input[Dataset]):
              """Get the Haiku parameters from a model name."""

              params_dir = model_params.path
              path = os.path.join(params_dir, f'params_{model_name}.npz')

              with open(path, 'rb') as f:
                  params = np.load(io.BytesIO(f.read()), allow_pickle=False)

              return utils.flat_params_to_haiku(params)


          def _load_features(model_featurs: Input[Dataset]):
              features_path = model_features.path
              with open(features_path, 'rb'):
                  features = pickle.load(f)
              return features


          model_config = config.model_config(model_name)
          # we assume monomer pipeline
          model_config.model.eval.nume_ensemble = num_ensemble
          model_params = _get_model_haiku_params(
              model_name=model_name, data_dir=model_params.path)
          model_runner = model.RunMode(model_config, model_params)
          features = _load_features(model_features)
          logging.info(f'Running prediction using model {model_name}')
          processed_feature_dict = model_runner.process_features(
              feature_dict=features,
              random_seed=random_seed
          )
          prediction_result = model_runner.predict(
              processed_feature_dict,
              random_seed=random_seed
          )

          plddt = prediction_result['plddt']
          ranking_confidence = prediction_result['ranking_confidence']
          with open(prediction_result.path, 'wb') as f:
              pickle.dump(prediction_result, f, protocol=4)
          prediction_result.metadata['ranking_confidence']=ranking_confidence
          prediction_result.metadata['data_format']='pkl'

          plddt_b_factors = np.repeat(
              plddt[:, None], residue_constants.atom_type_num, axis=-1)
          unrelaxed_protein = protein.from_prediction(
              features=processed_feature_dict,
              result=prediction_result,
              b_factors=plddt_b_factors,
              remove_leading_feature_dimension=not model_runner.multimer_mode)
          unrelaxed_pdbs = protein.to_pdb(unrelaxed_protein)
          with open(unrelaxed_protein.path, 'w') as f:
              f.write(unrelaxed_pdbs)
          unrelaxed_protein.metadata['data_format']='pdb'

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - predict
