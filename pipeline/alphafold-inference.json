{
  "pipelineSpec": {
    "components": {
      "comp-aggregate-features": {
        "executorLabel": "exec-aggregate-features",
        "inputDefinitions": {
          "artifacts": {
            "msa1": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "msa2": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "msa3": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "msa4": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "template_features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-for-loop-1": {
        "dag": {
          "tasks": {
            "predict": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-predict"
              },
              "inputs": {
                "artifacts": {
                  "model_features": {
                    "componentInputArtifact": "pipelineparam--aggregate-features-features"
                  },
                  "model_params": {
                    "componentInputArtifact": "pipelineparam--importer-2-artifact"
                  }
                },
                "parameters": {
                  "model_name": {
                    "componentInputParameter": "pipelineparam--models-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"model_name\"]"
                  },
                  "num_ensemble": {
                    "componentInputParameter": "pipelineparam--num_ensemble"
                  },
                  "random_seed": {
                    "componentInputParameter": "pipelineparam--models-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"random_seed\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "Predict"
              }
            },
            "relax": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-relax"
              },
              "dependentTasks": [
                "predict"
              ],
              "inputs": {
                "artifacts": {
                  "unrelaxed_protein": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "unrelaxed_protein",
                      "producerTask": "predict"
                    }
                  }
                },
                "parameters": {
                  "exclude_residues": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "max_iterations": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "max_outer_iterations": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "3"
                      }
                    }
                  },
                  "stiffness": {
                    "runtimeValue": {
                      "constantValue": {
                        "doubleValue": 10.0
                      }
                    }
                  },
                  "tolerance": {
                    "runtimeValue": {
                      "constantValue": {
                        "doubleValue": 2.39
                      }
                    }
                  },
                  "use_gpu": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "Relax protein"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--aggregate-features-features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "pipelineparam--importer-2-artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--models": {
              "type": "STRING"
            },
            "pipelineparam--models-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--num_ensemble": {
              "type": "INT"
            }
          }
        }
      },
      "comp-hhblits": {
        "executorLabel": "exec-hhblits",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "msa_dbs": {
              "type": "STRING"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-hhblits-2": {
        "executorLabel": "exec-hhblits-2",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "msa_dbs": {
              "type": "STRING"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-hhsearch": {
        "executorLabel": "exec-hhsearch",
        "inputDefinitions": {
          "artifacts": {
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "machine_type": {
              "type": "STRING"
            },
            "max_template_date": {
              "type": "STRING"
            },
            "max_template_hits": {
              "type": "INT"
            },
            "maxseq": {
              "type": "INT"
            },
            "mmcif_db": {
              "type": "STRING"
            },
            "n_cpu": {
              "type": "INT"
            },
            "obsolete_db": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            },
            "template_dbs": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "template_features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "template_hits": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-2": {
        "executorLabel": "exec-importer-2",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-3": {
        "executorLabel": "exec-importer-3",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-jackhmmer": {
        "executorLabel": "exec-jackhmmer",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "database": {
              "type": "STRING"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-jackhmmer-2": {
        "executorLabel": "exec-jackhmmer-2",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "database": {
              "type": "STRING"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-predict": {
        "executorLabel": "exec-predict",
        "inputDefinitions": {
          "artifacts": {
            "model_features": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "model_params": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "model_name": {
              "type": "STRING"
            },
            "num_ensemble": {
              "type": "INT"
            },
            "random_seed": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "raw_prediction": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "unrelaxed_protein": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-relax": {
        "executorLabel": "exec-relax",
        "inputDefinitions": {
          "artifacts": {
            "unrelaxed_protein": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "exclude_residues": {
              "type": "STRING"
            },
            "max_iterations": {
              "type": "INT"
            },
            "max_outer_iterations": {
              "type": "INT"
            },
            "stiffness": {
              "type": "DOUBLE"
            },
            "tolerance": {
              "type": "DOUBLE"
            },
            "use_gpu": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "relaxed_protein": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-aggregate-features": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "aggregate_features"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef aggregate_features(\n    sequence: Input[Dataset],\n    msa1: Input[Dataset],\n    msa2: Optional[Input[Dataset]],\n    msa3: Optional[Input[Dataset]],\n    msa4: Optional[Input[Dataset]],\n    template_features: Input[Dataset],\n    features: Output[Dataset]):\n    \"\"\"Aggregates MSAs and template features to create model features \n\n    In the prototype, we assume a fixed number of inputs, mirroring the sample\n    inference pipeline from DeepMind. When it comes to productionizing we should\n    consider \"dynamic\" at runtime or at least highly configurable at compile time\n    component.\n\n    \"\"\"\n\n    import os\n    import logging\n    import numpy as np\n    import pickle\n\n\n    from alphafold.common import residue_constants\n    from alphafold.data import msa_identifiers\n    from alphafold.data import parsers\n    from alphafold.data import templates\n\n\n\n    def _make_sequence_features(\n        sequence: str, description: str, num_res: int) -> dict:\n        \"\"\"Constructs a feature dict of sequence features.\"\"\"\n        features = {}\n        features['aatype'] = residue_constants.sequence_to_onehot(\n            sequence=sequence,\n            mapping=residue_constants.restype_order_with_x,\n            map_unknown_to_x=True)\n        features['between_segment_residues'] = np.zeros((num_res,), dtype=np.int32)\n        features['domain_name'] = np.array([description.encode('utf-8')],\n                                        dtype=np.object_)\n        features['residue_index'] = np.array(range(num_res), dtype=np.int32)\n        features['seq_length'] = np.array([num_res] * num_res, dtype=np.int32)\n        features['sequence'] = np.array([sequence.encode('utf-8')], dtype=np.object_)\n        return features\n\n\n    def _make_msa_features(msas: Sequence[parsers.Msa]) -> dict:\n        \"\"\"Constructs a feature dict of MSA features.\"\"\"\n        if not msas:\n            raise ValueError('At least one MSA must be provided.')\n\n        int_msa = []\n        deletion_matrix = []\n        uniprot_accession_ids = []\n        species_ids = []\n        seen_sequences = set()\n        for msa_index, msa in enumerate(msas):\n            if not msa:\n                raise ValueError(f'MSA {msa_index} must contain at least one sequence.')\n            for sequence_index, sequence in enumerate(msa.sequences):\n                if sequence in seen_sequences:\n                    continue\n                seen_sequences.add(sequence)\n                int_msa.append(\n                    [residue_constants.HHBLITS_AA_TO_ID[res] for res in sequence])\n                deletion_matrix.append(msa.deletion_matrix[sequence_index])\n                identifiers = msa_identifiers.get_identifiers(\n                    msa.descriptions[sequence_index])\n                uniprot_accession_ids.append(\n                    identifiers.uniprot_accession_id.encode('utf-8'))\n                species_ids.append(identifiers.species_id.encode('utf-8'))\n\n        num_res = len(msas[0].sequences[0])\n        num_alignments = len(int_msa)\n        features = {}\n        features['deletion_matrix_int'] = np.array(deletion_matrix, dtype=np.int32)\n        features['msa'] = np.array(int_msa, dtype=np.int32)\n        features['num_alignments'] = np.array(\n            [num_alignments] * num_res, dtype=np.int32)\n        features['msa_uniprot_accession_identifiers'] = np.array(\n            uniprot_accession_ids, dtype=np.object_)\n        features['msa_species_identifiers'] = np.array(species_ids, dtype=np.object_)\n        return features\n\n\n    def _read_msa(msa_path: str, msa_format: str):\n\n        if os.path.exists(msa_path):\n            with open(msa_path) as f:\n                msa = f.read()\n            if msa_format == 'sto':\n                msa = parsers.parse_stockholm(msa)\n            elif msa_format == 'a3m':\n                msa = parsers.parse_a3m(msa)\n            else:\n                raise RuntimeError(f'Unsupported MSA format: {msa_format}') \n        return msa\n\n    def _read_sequence(sequence_path: str):\n\n        with open(sequence_path) as f:\n            sequence_str = f.read()\n        sequences, sequence_descs = parsers.parse_fasta(sequence_str)\n        if len(sequences) != 1:\n            raise ValueError(\n                f'More than one input sequence found in {sequence_path}.')\n\n        return sequences[0], sequence_descs[0], len(sequences[0])\n\n\n    def _read_template_features(template_features_path):\n        with open(template_features_path, 'rb') as f:\n            template_features = pickle.load(f)\n        return template_features\n\n    # Create sequence features\n    seq, seq_desc, num_res = _read_sequence(sequence.path) \n    sequence_features = _make_sequence_features(\n        sequence=seq,\n        description=seq_desc,\n        num_res=num_res)\n\n    msas = []\n    msas.append(_read_msa(msa1.path, msa1.metadata['data_format']))\n    msas.append(_read_msa(msa2.path, msa2.metadata['data_format']))\n    msas.append(_read_msa(msa3.path, msa3.metadata['data_format']))\n    msas.append(_read_msa(msa4.path, msa4.metadata['data_format']))\n    if not msas:\n        raise RuntimeError('No MSAs passed to the component')\n    msa_features = _make_msa_features(msas=msas)\n\n    # Create template features\n    template_features = _read_template_features(template_features.path)\n\n    model_features = {\n        **sequence_features,\n        **msa_features,\n        **template_features\n    }\n\n    features_path = features.path\n    features.metadata['data_format'] = 'pkl'\n    with open(features_path, 'wb') as f:\n        pickle.dump(model_features, f, protocol=4)\n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold"
          }
        },
        "exec-hhblits": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "hhblits"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef hhblits(\n    project: str,\n    region: str,\n    msa_dbs: list,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=1_000_000,\n    machine_type:str='c2-standard-16',\n    boot_disk_size:int=200,\n    n_cpu:int=8, \n    ):\n    \"\"\"Searches sequence databases using the specified tool.\n\n    This is a simple prototype using dsub to submit a Cloud Life Sciences pipeline.\n    We are using CLS as KFP does not support attaching pre-populated disks or premtible VMs.\n    GCSFuse does not perform well with tools like hhsearch or hhblits.\n\n    The prototype also lacks job control. If a pipeline step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\n    _SUPPORTED_DATABASES = ['bfd', 'uniclust30']\n    _DSUB_PROVIDER = 'google-cls-v2'\n    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n    _SCRIPT = '/scripts/alphafold_runners/hhblits_runner.py'  \n\n    logging.basicConfig(format='%(asctime)s - %(message)s',\n                      level=logging.INFO, \n                      datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\n    for database in msa_dbs:\n        if not (database in _SUPPORTED_DATABASES):\n            raise RuntimeError(f'HHBlits cannot be used with {database} database.')\n\n    database_paths = [reference_databases.metadata[database] for database in msa_dbs] \n    database_paths = ','.join(database_paths)\n\n    job_params = [\n        '--machine-type', machine_type,\n        '--boot-disk-size', str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval', _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env', f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"disk_image\"]}',\n        '--input', f'INPUT_PATH={sequence.uri}',\n        '--output', f'OUTPUT_PATH={msa.uri}',\n        '--env', f'DB_PATHS={database_paths}',\n        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n        '--script', _SCRIPT \n    ]\n\n    result = run_dsub_job(\n        provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n        params=job_params,\n    )\n\n    msa.metadata['data_format'] = 'a3m'   \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-hhblits-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "hhblits"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef hhblits(\n    project: str,\n    region: str,\n    msa_dbs: list,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=1_000_000,\n    machine_type:str='c2-standard-16',\n    boot_disk_size:int=200,\n    n_cpu:int=8, \n    ):\n    \"\"\"Searches sequence databases using the specified tool.\n\n    This is a simple prototype using dsub to submit a Cloud Life Sciences pipeline.\n    We are using CLS as KFP does not support attaching pre-populated disks or premtible VMs.\n    GCSFuse does not perform well with tools like hhsearch or hhblits.\n\n    The prototype also lacks job control. If a pipeline step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\n    _SUPPORTED_DATABASES = ['bfd', 'uniclust30']\n    _DSUB_PROVIDER = 'google-cls-v2'\n    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n    _SCRIPT = '/scripts/alphafold_runners/hhblits_runner.py'  \n\n    logging.basicConfig(format='%(asctime)s - %(message)s',\n                      level=logging.INFO, \n                      datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\n    for database in msa_dbs:\n        if not (database in _SUPPORTED_DATABASES):\n            raise RuntimeError(f'HHBlits cannot be used with {database} database.')\n\n    database_paths = [reference_databases.metadata[database] for database in msa_dbs] \n    database_paths = ','.join(database_paths)\n\n    job_params = [\n        '--machine-type', machine_type,\n        '--boot-disk-size', str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval', _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env', f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"disk_image\"]}',\n        '--input', f'INPUT_PATH={sequence.uri}',\n        '--output', f'OUTPUT_PATH={msa.uri}',\n        '--env', f'DB_PATHS={database_paths}',\n        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n        '--script', _SCRIPT \n    ]\n\n    result = run_dsub_job(\n        provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n        params=job_params,\n    )\n\n    msa.metadata['data_format'] = 'a3m'   \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-hhsearch": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "hhsearch"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef hhsearch(\n    project: str,\n    region: str,\n    template_dbs: list,\n    mmcif_db: str,\n    obsolete_db: str,\n    max_template_date: str,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Input[Dataset],\n    template_hits: Output[Dataset],\n    template_features: Output[Dataset],\n    cls_logging: Output[Artifact],\n    machine_type:str='c2-standard-8',\n    n_cpu:int=8,\n    boot_disk_size:int=200,\n    maxseq:int=1_000_000,\n    max_template_hits:int=20, \n    ):\n    \"\"\"Searches for protein templates \n\n    This is a simple prototype using dsub to submit a Cloud Life Sciences pipeline.\n    We are using CLS as KFP does not support attaching pre-populated disks or premtible VMs.\n    GCSFuse does not perform well with tools like hhsearch or hhblits.\n\n    he prototype also lacks job control. If a pipeline step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\n    _DSUB_PROVIDER = 'google-cls-v2'\n    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n    _SCRIPT = '/scripts/alphafold_runners/hhsearch_runner.py'\n\n\n    logging.basicConfig(format='%(asctime)s - %(message)s',\n                      level=logging.INFO, \n                      datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\n    database_paths = [reference_databases.metadata[database]\n                      for database in template_dbs]\n    database_paths = ','.join(database_paths)\n\n    job_params = [\n        '--machine-type', machine_type,\n        '--boot-disk-size', str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval', _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env', f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"disk_image\"]}',\n        '--input', f'INPUT_SEQUENCE_PATH={sequence.uri}',\n        '--input', f'INPUT_MSA_PATH={msa.uri}',\n        '--output', f'OUTPUT_TEMPLATE_HITS_PATH={template_hits.uri}',\n        '--output', f'OUTPUT_TEMPLATE_FEATURES_PATH={template_features.uri}',\n        '--env', f'MSA_DATA_FORMAT={msa.metadata[\"data_format\"]}',\n        '--env', f'DB_PATHS={database_paths}',\n        '--env', f'MMCIF_PATH={reference_databases.metadata[mmcif_db]}',\n        '--env', f'OBSOLETE_PATH={reference_databases.metadata[obsolete_db]}',\n        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n        '--env', f'MAX_TEMPLATE_HITS={max_template_hits}',\n        '--env', f'MAX_TEMPLATE_DATE={max_template_date}', \n        '--script', _SCRIPT, \n    ]\n\n    result = run_dsub_job(\n        provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n        params=job_params,\n    )\n\n    template_hits.metadata['data_format'] = 'hhr'\n    template_features.metadata['data_format'] = 'pkl' \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "metadata": {
              "data_format": "fasta"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-2": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "metadata": {
              "Description": "AlphaFold parameters - v2.2"
            },
            "typeSchema": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-3": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "metadata": {
              "bfd": "bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt",
              "disk_image": "https://www.googleapis.com/compute/v1/projects/jk-mlops-dev/global/images/jk-alphafold-datasets 3000",
              "mgnify": "mgnify/mgy_clusters_2018_12.fa",
              "pdb70": "pdb70/pdb70",
              "pdb_mmcif": "pdb_mmcif/mmcif_files",
              "pdb_obsolete": "pdb_mmcif/obsolete.dat",
              "pdb_seqres": "pdb_seqres/pdb_seqres.txt",
              "uniclust30": "uniclust30/uniclust30_2018_08/uniclust30_2018_08",
              "uniprot": "uniprot/uniprot.fasta",
              "uniref90": "uniref90/uniref90.fasta"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-jackhmmer": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "jackhmmer"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef jackhmmer(\n    project: str,\n    region: str,\n    database: str,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=10_000,\n    machine_type:str='n1-standard-8',\n    boot_disk_size:int=100,\n    n_cpu:int=8,\n    ):\n    \"\"\"Searches the specified database using jackhmmer.\n\n    This is a simple prototype using dsub to submit a Cloud Life Sciences pipeline.\n    We are using CLS as KFP does not support attaching pre-populated disks or premtible VMs.\n    GCSFuse does not perform well with genetic database search tools .\n\n    The prototype also lacks job control. If a pipeline step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\n    _SUPPORTED_DATABASES = ['uniref90', 'mgnify']\n    _DSUB_PROVIDER = 'google-cls-v2'\n    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n    _SCRIPT = '/scripts/alphafold_runners/jackhmmer_runner.py'  \n\n    logging.basicConfig(format='%(asctime)s - %(message)s',\n                      level=logging.INFO, \n                      datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\n    if not (str(database) in _SUPPORTED_DATABASES):\n        raise RuntimeError(f'Jackhmmer cannot be used with {database} database.')\n\n    job_params = [\n        '--machine-type', machine_type,\n        '--boot-disk-size', str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval', _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env', f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"disk_image\"]}',\n        '--input', f'INPUT_PATH={sequence.uri}',\n        '--output', f'OUTPUT_PATH={msa.uri}',\n        '--env', f'DB_PATH={reference_databases.metadata[database]}',\n        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n        '--script', _SCRIPT \n    ]\n\n    result = run_dsub_job(\n        provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n        params=job_params,\n    )\n\n    msa.metadata['data_format'] = 'sto'  \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-jackhmmer-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "jackhmmer"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef jackhmmer(\n    project: str,\n    region: str,\n    database: str,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=10_000,\n    machine_type:str='n1-standard-8',\n    boot_disk_size:int=100,\n    n_cpu:int=8,\n    ):\n    \"\"\"Searches the specified database using jackhmmer.\n\n    This is a simple prototype using dsub to submit a Cloud Life Sciences pipeline.\n    We are using CLS as KFP does not support attaching pre-populated disks or premtible VMs.\n    GCSFuse does not perform well with genetic database search tools .\n\n    The prototype also lacks job control. If a pipeline step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\n    _SUPPORTED_DATABASES = ['uniref90', 'mgnify']\n    _DSUB_PROVIDER = 'google-cls-v2'\n    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n    _SCRIPT = '/scripts/alphafold_runners/jackhmmer_runner.py'  \n\n    logging.basicConfig(format='%(asctime)s - %(message)s',\n                      level=logging.INFO, \n                      datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\n    if not (str(database) in _SUPPORTED_DATABASES):\n        raise RuntimeError(f'Jackhmmer cannot be used with {database} database.')\n\n    job_params = [\n        '--machine-type', machine_type,\n        '--boot-disk-size', str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval', _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env', f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"disk_image\"]}',\n        '--input', f'INPUT_PATH={sequence.uri}',\n        '--output', f'OUTPUT_PATH={msa.uri}',\n        '--env', f'DB_PATH={reference_databases.metadata[database]}',\n        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n        '--script', _SCRIPT \n    ]\n\n    result = run_dsub_job(\n        provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n        params=job_params,\n    )\n\n    msa.metadata['data_format'] = 'sto'  \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-predict": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "predict"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef predict(\n    model_features: Input[Dataset],\n    model_params: Input[Artifact],\n    model_name: str,\n    num_ensemble: int,\n    random_seed: int,\n    raw_prediction: Output[Artifact],\n    unrelaxed_protein: Output[Artifact]\n):\n\n    import io\n    import os\n    import logging\n    import numpy as np\n    import pickle\n\n    import haiku as hk\n\n    from alphafold.model import config\n    from alphafold.model import data\n    from alphafold.model import model\n    from alphafold.model import utils\n    from alphafold.common import residue_constants\n    from alphafold.common import protein\n\n    def _get_model_haiku_params(model_name: str,\n                                params_dir: str):\n        \"\"\"Get the Haiku parameters from a model name.\"\"\"\n\n        path = os.path.join(params_dir, f'params_{model_name}.npz')\n\n        with open(path, 'rb') as f:\n            params = np.load(io.BytesIO(f.read()), allow_pickle=False)\n\n        return utils.flat_params_to_haiku(params)\n\n    def _load_features(features_path):\n        features_path = model_features.path\n        with open(features_path, 'rb') as f:\n            features = pickle.load(f)\n        return features\n\n    model_config = config.model_config(model_name)\n\n    # we assume  a monomer pipeline in a POC\n    model_config.data.eval.num_ensemble = num_ensemble\n    model_params = _get_model_haiku_params(\n        model_name=model_name, params_dir=model_params.path)\n    model_runner = model.RunModel(model_config, model_params)\n\n    features = _load_features(model_features.path)\n    logging.info(f'Running prediction using model {model_name}')\n    processed_feature_dict = model_runner.process_features(\n        raw_features=features,\n        random_seed=random_seed\n    )\n    prediction_result = model_runner.predict(\n        feat=processed_feature_dict,\n        random_seed=random_seed\n    )\n\n    with open(raw_prediction.path, 'wb') as f:\n        pickle.dump(prediction_result, f, protocol=4)\n    raw_prediction.metadata['ranking_confidence']=prediction_result['ranking_confidence']\n    raw_prediction.metadata['data_format']='pkl'\n\n    plddt = prediction_result['plddt']\n    plddt_b_factors = np.repeat(\n        plddt[:, None], residue_constants.atom_type_num, axis=-1)\n    unrelaxed_structure= protein.from_prediction(\n        features=processed_feature_dict,\n        result=prediction_result,\n        b_factors=plddt_b_factors,\n        remove_leading_feature_dimension=not model_runner.multimer_mode)\n    unrelaxed_pdbs = protein.to_pdb(unrelaxed_structure)\n    with open(unrelaxed_protein.path, 'w') as f:\n        f.write(unrelaxed_pdbs)\n    unrelaxed_protein.metadata['data_format']='pdb'\n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold",
            "resources": {
              "cpuLimit": 16.0,
              "memoryLimit": 32.0
            }
          }
        },
        "exec-relax": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "relax"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef relax(\n    unrelaxed_protein: Input[Artifact],\n    relaxed_protein: Output[Artifact],\n    max_iterations: int=0,\n    tolerance: float=2.39,\n    stiffness: float=10.0,\n    exclude_residues: list=[],\n    max_outer_iterations: int=3,\n    use_gpu: bool=True,\n):\n\n    import os\n    import logging\n    import numpy as np\n    import pickle\n\n    from alphafold.model import utils\n    from alphafold.common import residue_constants\n    from alphafold.common import protein\n    from alphafold.relax import relax\n\n\n    if not os.path.exists(unrelaxed_protein.path):\n        raise RuntimeError(f'Invalid path to unrelaxed structure: {unrelaxed_protein.path}')\n\n    with open(unrelaxed_protein.path, 'r') as f:\n        unrelaxed_protein_pdb=f.read();\n\n    unrelaxed_protein = protein.from_pdb_string(unrelaxed_protein_pdb)\n\n    amber_relaxer = relax.AmberRelaxation(\n        max_iterations=max_iterations,\n        tolerance=tolerance,\n        stiffness=stiffness,\n        exclude_residues=exclude_residues,\n        max_outer_iterations=max_outer_iterations,\n        use_gpu=use_gpu)\n\n    relaxed_protein = amber_relaxer.process(prot=unrelaxed_protein)\n\n    relaxed_protein_pdb = protein.to_pdb(relaxed_protein) \n    with open(relaxed_protein.path, 'w') as f:\n        f.write(relaxed_protein_pdb)\n    relaxed_protein.metadata['data_format']='pdb'\n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold",
            "resources": {
              "cpuLimit": 16.0,
              "memoryLimit": 32.0
            }
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "alphafold-inference"
    },
    "root": {
      "dag": {
        "tasks": {
          "aggregate-features": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-aggregate-features"
            },
            "dependentTasks": [
              "hhblits",
              "hhblits-2",
              "hhsearch",
              "importer",
              "jackhmmer",
              "jackhmmer-2"
            ],
            "inputs": {
              "artifacts": {
                "msa1": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "msa",
                    "producerTask": "jackhmmer"
                  }
                },
                "msa2": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "msa",
                    "producerTask": "jackhmmer-2"
                  }
                },
                "msa3": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "msa",
                    "producerTask": "hhblits-2"
                  }
                },
                "msa4": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "msa",
                    "producerTask": "hhblits"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                },
                "template_features": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "template_features",
                    "producerTask": "hhsearch"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Aggregate features"
            }
          },
          "for-loop-1": {
            "componentRef": {
              "name": "comp-for-loop-1"
            },
            "dependentTasks": [
              "aggregate-features",
              "importer-2"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--aggregate-features-features": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "features",
                    "producerTask": "aggregate-features"
                  }
                },
                "pipelineparam--importer-2-artifact": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-2"
                  }
                }
              },
              "parameters": {
                "pipelineparam--models": {
                  "componentInputParameter": "models"
                },
                "pipelineparam--num_ensemble": {
                  "componentInputParameter": "num_ensemble"
                }
              }
            },
            "parameterIterator": {
              "itemInput": "pipelineparam--models-loop-item",
              "items": {
                "inputParameter": "pipelineparam--models"
              }
            },
            "taskInfo": {
              "name": "for-loop-1"
            }
          },
          "hhblits": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-hhblits"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "200"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "c2-standard-16"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1000000"
                    }
                  }
                },
                "msa_dbs": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"uniclust30\"]"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search Uniclust"
            }
          },
          "hhblits-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-hhblits-2"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "200"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "c2-standard-16"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1000000"
                    }
                  }
                },
                "msa_dbs": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"bfd\"]"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search BFD"
            }
          },
          "hhsearch": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-hhsearch"
            },
            "dependentTasks": [
              "importer",
              "importer-3",
              "jackhmmer"
            ],
            "inputs": {
              "artifacts": {
                "msa": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "msa",
                    "producerTask": "jackhmmer"
                  }
                },
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "200"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "c2-standard-8"
                    }
                  }
                },
                "max_template_date": {
                  "componentInputParameter": "max_template_date"
                },
                "max_template_hits": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "20"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "1000000"
                    }
                  }
                },
                "mmcif_db": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "pdb_mmcif"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "obsolete_db": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "pdb_obsolete"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                },
                "template_dbs": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"pdb70\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "Search Pdb"
            }
          },
          "importer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "fasta_path"
                }
              }
            },
            "taskInfo": {
              "name": "Input sequence"
            }
          },
          "importer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-2"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "model_params_gcs_location"
                }
              }
            },
            "taskInfo": {
              "name": "Model parameters"
            }
          },
          "importer-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-3"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "datasets_gcs_location"
                }
              }
            },
            "taskInfo": {
              "name": "Reference databases"
            }
          },
          "jackhmmer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-jackhmmer"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "100"
                    }
                  }
                },
                "database": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "uniref90"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-8"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "10000"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search Uniref"
            }
          },
          "jackhmmer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-jackhmmer-2"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "100"
                    }
                  }
                },
                "database": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "mgnify"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-8"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "10000"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search Mgnify"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "datasets_gcs_location": {
            "type": "STRING"
          },
          "fasta_path": {
            "type": "STRING"
          },
          "max_template_date": {
            "type": "STRING"
          },
          "model_params_gcs_location": {
            "type": "STRING"
          },
          "models": {
            "type": "STRING"
          },
          "num_ensemble": {
            "type": "INT"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {
    "parameters": {
      "datasets_gcs_location": {
        "stringValue": "gs://jk-alphafold-datasets-archive/jan-22"
      },
      "max_template_date": {
        "stringValue": "2020-05-14"
      },
      "model_params_gcs_location": {
        "stringValue": "gs://jk-alphafold-datasets-archive/jan-22/params"
      },
      "models": {
        "stringValue": "[{\"model_name\": \"model_1\", \"random_seed\": 1}]"
      },
      "num_ensemble": {
        "intValue": "1"
      },
      "project": {
        "stringValue": "jk-mlops-dev"
      },
      "region": {
        "stringValue": "us-central1"
      }
    }
  }
}