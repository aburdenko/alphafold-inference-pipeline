{
  "pipelineSpec": {
    "components": {
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-2": {
        "executorLabel": "exec-importer-2",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-importer-3": {
        "executorLabel": "exec-importer-3",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-jackhmmer": {
        "executorLabel": "exec-jackhmmer",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "database": {
              "type": "STRING"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "project_number": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-jackhmmer-2": {
        "executorLabel": "exec-jackhmmer-2",
        "inputDefinitions": {
          "artifacts": {
            "reference_databases": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "sequence": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "boot_disk_size": {
              "type": "INT"
            },
            "database": {
              "type": "STRING"
            },
            "machine_type": {
              "type": "STRING"
            },
            "maxseq": {
              "type": "INT"
            },
            "n_cpu": {
              "type": "INT"
            },
            "project": {
              "type": "STRING"
            },
            "project_number": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "cls_logging": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "msa": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-2": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "typeSchema": {
              "schemaTitle": "system.Artifact",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-importer-3": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "metadata": {
              "bfd": "bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt",
              "mgnify": "mgnify/mgy_clusters_2018_12.fa",
              "pdb70": "pdb70/pdb70",
              "pdb_mmcif": "pdb_mmcif/mmcif_files",
              "pdb_obsolete": "pdb_mmcif/obsolete.dat",
              "pdb_seqres": "pdb_seqres/pdb_seqres.txt",
              "uniclust30": "uniclust30/uniclust30_2018_08/uniclust30_2018_08",
              "uniprot": "uniprot/uniprot.fasta",
              "uniref90": "uniref90/uniref90.fasta"
            },
            "typeSchema": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-jackhmmer": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "jackhmmer"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef jackhmmer(\n    project: str,\n    project_number: str,\n    region: str,\n    database: str,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=10_000,\n    n_cpu:int=8,\n    machine_type:str='n1-standard-8',\n    boot_disk_size:int=200,\n    ):\n    \"\"\"Searches the specified database using jackhmmer.  \"\"\"\n\n    import logging\n    import os\n    import sys\n    import time\n\n    from alphafold.data import parsers\n    from dsub_wrapper import run_dsub_job\n    from job_runner import CustomJob\n\n    _SUPPORTED_DATABASES = ['uniref90', 'mgnify']\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold-components'\n    _SCRIPT = '/scripts/alphafold_runners/jackhmmer_runner.py'  \n\n    #logging.basicConfig(format='%(asctime)s - %(message)s',\n    #                  level=logging.INFO, \n    #                  datefmt='%d-%m-%y %H:%M:%S',\n    #                  stream=sys.stdout)\n\n    if not (str(database) in _SUPPORTED_DATABASES):\n        raise RuntimeError(f'Jackhmmer cannot be used with {database} database.')\n\n    nfs_server, nfs_root_path, mount_path, network_name = reference_databases.uri.split(',')\n    network = f'projects/{project_number}/global/networks/{network_name}'    \n\n    params = {\n        'INPUT_PATH': sequence.uri,\n        'OUTPUT_PATH': msa.uri,\n        'DB_ROOT': mount_path,\n        'DB_PATH': reference_databases.metadata[database],\n        'N_CPU': str(n_cpu),\n        'MAXSEQ': str(maxseq)\n    } \n    job_name = f'JACKHMMER_JOB_{time.strftime(\"%Y%m%d_%H%M%S\")}'\n\n    t0 = time.time()\n    logging.info('Starting database search...')\n    custom_job = CustomJob.from_script_in_container(\n        display_name=job_name,\n        script_path=_SCRIPT,\n        container_uri=_ALPHAFOLD_RUNNER_IMAGE,\n        project=project,\n        location=region,\n        machine_type=machine_type,\n        boot_disk_size_gb=boot_disk_size,\n        nfs_server=nfs_server,\n        nfs_root_path=nfs_root_path,\n        mount_path=mount_path,\n        env_variables=params,\n    )\n    custom_job.run(\n       network=network\n    )\n    t1 = time.time()\n    logging.info(f'Search completed. Elapsed time: {t1-t0}')\n\n    with open(msa.path) as f:\n        msa_str = f.read()\n    parsed_msa = parsers.parse_stockholm(msa_str)\n    msa.metadata['data_format'] = 'sto' \n    msa.metadata['num of sequences'] = len(parsed_msa.sequences)  \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        },
        "exec-jackhmmer-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "jackhmmer"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef jackhmmer(\n    project: str,\n    project_number: str,\n    region: str,\n    database: str,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=10_000,\n    n_cpu:int=8,\n    machine_type:str='n1-standard-8',\n    boot_disk_size:int=200,\n    ):\n    \"\"\"Searches the specified database using jackhmmer.  \"\"\"\n\n    import logging\n    import os\n    import sys\n    import time\n\n    from alphafold.data import parsers\n    from dsub_wrapper import run_dsub_job\n    from job_runner import CustomJob\n\n    _SUPPORTED_DATABASES = ['uniref90', 'mgnify']\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold-components'\n    _SCRIPT = '/scripts/alphafold_runners/jackhmmer_runner.py'  \n\n    #logging.basicConfig(format='%(asctime)s - %(message)s',\n    #                  level=logging.INFO, \n    #                  datefmt='%d-%m-%y %H:%M:%S',\n    #                  stream=sys.stdout)\n\n    if not (str(database) in _SUPPORTED_DATABASES):\n        raise RuntimeError(f'Jackhmmer cannot be used with {database} database.')\n\n    nfs_server, nfs_root_path, mount_path, network_name = reference_databases.uri.split(',')\n    network = f'projects/{project_number}/global/networks/{network_name}'    \n\n    params = {\n        'INPUT_PATH': sequence.uri,\n        'OUTPUT_PATH': msa.uri,\n        'DB_ROOT': mount_path,\n        'DB_PATH': reference_databases.metadata[database],\n        'N_CPU': str(n_cpu),\n        'MAXSEQ': str(maxseq)\n    } \n    job_name = f'JACKHMMER_JOB_{time.strftime(\"%Y%m%d_%H%M%S\")}'\n\n    t0 = time.time()\n    logging.info('Starting database search...')\n    custom_job = CustomJob.from_script_in_container(\n        display_name=job_name,\n        script_path=_SCRIPT,\n        container_uri=_ALPHAFOLD_RUNNER_IMAGE,\n        project=project,\n        location=region,\n        machine_type=machine_type,\n        boot_disk_size_gb=boot_disk_size,\n        nfs_server=nfs_server,\n        nfs_root_path=nfs_root_path,\n        mount_path=mount_path,\n        env_variables=params,\n    )\n    custom_job.run(\n       network=network\n    )\n    t1 = time.time()\n    logging.info(f'Search completed. Elapsed time: {t1-t0}')\n\n    with open(msa.path) as f:\n        msa_str = f.read()\n    parsed_msa = parsers.parse_stockholm(msa_str)\n    msa.metadata['data_format'] = 'sto' \n    msa.metadata['num of sequences'] = len(parsed_msa.sequences)  \n\n"
            ],
            "image": "gcr.io/jk-mlops-dev/alphafold-components"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "alphafold-inference"
    },
    "root": {
      "dag": {
        "tasks": {
          "importer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "sequence_path"
                }
              }
            },
            "taskInfo": {
              "name": "Input sequence"
            }
          },
          "importer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-2"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "model_params_uri"
                }
              }
            },
            "taskInfo": {
              "name": "Model parameters"
            }
          },
          "importer-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-importer-3"
            },
            "inputs": {
              "parameters": {
                "uri": {
                  "componentInputParameter": "reference_datasets_uri"
                }
              }
            },
            "taskInfo": {
              "name": "Reference databases"
            }
          },
          "jackhmmer": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-jackhmmer"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "200"
                    }
                  }
                },
                "database": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "uniref90"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-8"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "10000"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "project_number": {
                  "componentInputParameter": "project_number"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search Uniref"
            }
          },
          "jackhmmer-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-jackhmmer-2"
            },
            "dependentTasks": [
              "importer",
              "importer-3"
            ],
            "inputs": {
              "artifacts": {
                "reference_databases": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer-3"
                  }
                },
                "sequence": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "artifact",
                    "producerTask": "importer"
                  }
                }
              },
              "parameters": {
                "boot_disk_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "200"
                    }
                  }
                },
                "database": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "mgnify"
                    }
                  }
                },
                "machine_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "n1-standard-8"
                    }
                  }
                },
                "maxseq": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "10000"
                    }
                  }
                },
                "n_cpu": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "8"
                    }
                  }
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "project_number": {
                  "componentInputParameter": "project_number"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "Search Mgnify"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "max_template_date": {
            "type": "STRING"
          },
          "model_params_uri": {
            "type": "STRING"
          },
          "models": {
            "type": "STRING"
          },
          "num_ensemble": {
            "type": "INT"
          },
          "project": {
            "type": "STRING"
          },
          "project_number": {
            "type": "STRING"
          },
          "reference_datasets_uri": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          },
          "sequence_desc": {
            "type": "STRING"
          },
          "sequence_path": {
            "type": "STRING"
          },
          "use_gpu_for_relaxation": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {
    "parameters": {
      "max_template_date": {
        "stringValue": "2020-05-14"
      },
      "model_params_uri": {
        "stringValue": "gs://jk-alphafold-datasets-archive/jan-22/params"
      },
      "models": {
        "stringValue": "[{\"model_name\": \"model_1\", \"random_seed\": 1}]"
      },
      "num_ensemble": {
        "intValue": "1"
      },
      "project": {
        "stringValue": "jk-mlops-dev"
      },
      "project_number": {
        "stringValue": "895222332033"
      },
      "reference_datasets_uri": {
        "stringValue": "10.71.1.10,/datasets_v1,/mnt/nfs/alphafold,default"
      },
      "region": {
        "stringValue": "us-central1"
      },
      "use_gpu_for_relaxation": {
        "stringValue": "True"
      }
    }
  }
}