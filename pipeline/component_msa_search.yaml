name: Hhblits
description: Searches sequence databases using the specified tool.
inputs:
- {name: project, type: String}
- {name: region, type: String}
- {name: msa_dbs, type: JsonArray}
- {name: reference_databases, type: Dataset}
- {name: sequence, type: Dataset}
- {name: maxseq, type: Integer, default: '1000000', optional: true}
- {name: machine_type, type: String, default: c2-standard-16, optional: true}
- {name: boot_disk_size, type: Integer, default: '200', optional: true}
- {name: n_cpu, type: Integer, default: '8', optional: true}
outputs:
- {name: msa, type: Dataset}
- {name: cls_logging, type: Artifact}
implementation:
  container:
    image: gcr.io/jk-mlops-dev/alphafold-components
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef hhblits(\n    project: str,\n    region: str,\n    msa_dbs:\
      \ list,\n    reference_databases: Input[Dataset],\n    sequence: Input[Dataset],\n\
      \    msa: Output[Dataset],\n    cls_logging: Output[Artifact],\n    maxseq:int=1_000_000,\n\
      \    machine_type:str='c2-standard-16',\n    boot_disk_size:int=200,\n    n_cpu:int=8,\
      \ \n    ):\n    \"\"\"Searches sequence databases using the specified tool.\n\
      \n    This is a simple prototype using dsub to submit a Cloud Life Sciences\
      \ pipeline.\n    We are using CLS as KFP does not support attaching pre-populated\
      \ disks or premtible VMs.\n    GCSFuse does not perform well with tools like\
      \ hhsearch or hhblits.\n\n    The prototype also lacks job control. If a pipeline\
      \ step fails, the CLS job can get \n    orphaned\n\n    \"\"\"\n\n    import\
      \ logging\n    import os\n    import sys\n\n    from dsub_wrapper import run_dsub_job\n\
      \n    _SUPPORTED_DATABASES = ['bfd', 'uniclust30']\n    _DSUB_PROVIDER = 'google-cls-v2'\n\
      \    _LOG_INTERVAL = '30s'\n    _ALPHAFOLD_RUNNER_IMAGE = 'gcr.io/jk-mlops-dev/alphafold'\n\
      \    _SCRIPT = '/scripts/alphafold_runners/hhblits_runner.py'  \n\n    logging.basicConfig(format='%(asctime)s\
      \ - %(message)s',\n                      level=logging.INFO, \n            \
      \          datefmt='%d-%m-%y %H:%M:%S',\n                      stream=sys.stdout)\n\
      \n    for database in msa_dbs:\n        if not (database in _SUPPORTED_DATABASES):\n\
      \            raise RuntimeError(f'HHBlits cannot be used with {database} database.')\n\
      \n    database_paths = [reference_databases.metadata[database] for database\
      \ in msa_dbs] \n    database_paths = ','.join(database_paths)\n\n    job_params\
      \ = [\n        '--machine-type', machine_type,\n        '--boot-disk-size',\
      \ str(boot_disk_size),\n        '--logging', cls_logging.uri,\n        '--log-interval',\
      \ _LOG_INTERVAL, \n        '--image', _ALPHAFOLD_RUNNER_IMAGE,\n        '--env',\
      \ f'PYTHONPATH=/app/alphafold',\n        '--mount', f'DB_ROOT={reference_databases.metadata[\"\
      disk_image\"]}',\n        '--input', f'INPUT_PATH={sequence.uri}',\n       \
      \ '--output', f'OUTPUT_PATH={msa.uri}',\n        '--env', f'DB_PATHS={database_paths}',\n\
      \        '--env', f'N_CPU={n_cpu}',\n        '--env', f'MAXSEQ={maxseq}', \n\
      \        '--script', _SCRIPT \n    ]\n\n    result = run_dsub_job(\n       \
      \ provider=_DSUB_PROVIDER,\n        project=project,\n        regions=region,\n\
      \        params=job_params,\n    )\n\n    msa.metadata['data_format'] = 'a3m'\
      \   \n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - hhblits
